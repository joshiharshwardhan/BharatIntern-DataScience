import pandas_datareader as pdr


df = pdr.get_data_tiingo('AAPL',api_key='e5ac70ccb777323e670eb2ac8861e357e55b5224')


df.to_csv('AAPL.csv')

import pandas as pd

df = pd.read_csv('AAPL.csv')

df.tail()

df1 = df.reset_index()['close']

df1

import matplotlib.pyplot as plt
plt.plot(df1)

from sklearn.preprocessing import MinMaxScaler
import numpy as np
scaler = MinMaxScaler(feature_range=(0,1))
df1 = scaler.fit_transform(np.array(df1).reshape(-1,1))

df1

training_size = int(len(df1)*0.65)
test_size = len(df1)-training_size
training_data,test_data = df1[0:training_size,:] , df1[training_size:len(df1),:1]


training_size

training_data,test_data

import numpy
def create_dataset(dataset,time_stemp=1):
    datax,datay = [],[]
    for i in range(len(dataset)-time_stemp-1):
        a = dataset[i:i+time_stemp,0]
        datax.append(a)
        datay.append(dataset[i+time_stemp,0])
    return numpy.array(datax),numpy.array(datay)

time_stemp = 100
x_train,y_train = create_dataset(training_data,time_stemp)
x_test,y_test = create_dataset(test_data,time_stemp)

print(x_train)

print(y_train)

print(x_train.shape),print(y_train.shape)

print(x_test)

print(x_test.shape),print(y_test.shape)

implementing LSTM model


# reshaping x_train and x_test 
x_train = x_train.reshape(x_train.shape[0],x_train.shape[1],1)
x_test = x_test.reshape(x_test.shape[0],x_test.shape[1],1)


Creating stacked LSTM Model

pip install tensorflow

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM

model=Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(100,1)))
model.add(LSTM(50,return_sequences=True))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss = 'mean_squared_error',optimizer='adam')


model.summary()

x_train = x_train.reshape(x_train.shape[0],x_train.shape[1],1)
x_test = x_test.reshape(x_test.shape[0],x_test.shape[1],1)
model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=100,batch_size=64,verbose=1)

train_predict = model.predict(x_train)
test_predict = model.predict(x_test)

# transform back to original form
train_predict = scaler.inverse_transform(train_predict)
test_predict = scaler.inverse_transform(test_predict)


#calculate rmse performance matrices
import math
from sklearn.metrics import mean_squared_error
#rmse value of train dataset
math.sqrt(mean_squared_error(y_train,train_predict))



#rmse value of test dataset
math.sqrt(mean_squared_error(y_test,test_predict))


plotting

# shift train predictions for plotting
look_back = 100
trainPredictPlot = numpy.empty_like(df1)
trainPredictPlot[:,:] = np.nan
trainPredictPlot[look_back:len(train_predict)+look_back,:] = train_predict

#shift test predictions for plotting
testPredictPlot = numpy.empty_like(df1)
testPredictPlot[:,:] = numpy.nan
testPredictPlot[len(train_predict)+(look_back)*2+1:len(df)-1,:] = test_predict
plt.plot(scaler.inverse_transform(df1))
plt.plot(trainPredictPlot)
plt.plot(testPredictPlot)
plt.show()



len(test_data)

x_input = test_data[340:].reshape(1,-1)
x_input.shape

temp_input = list(x_input)
temp_input = temp_input[0].tolist()

temp_input

# demonstrating predictions for next 30 days
from numpy import array
lst_output = []
n_steps = 100
i = 0
while(i<30):
    if(len(temp_input)>100): # if temp_input>100 than we have to shift from one position to other because it means new data is added to input
        x_input = np.array(temp_input[1:])
        print("{} input {}".format(i,x_input))
        x_input = x_input.reshape(1,-1)
        x_input = x_input.reshape(1,n_steps,1)
        #print x_input
        yhat = model.predict(x_input, verbose=0)
        print("{} day output {}".format(i,yhat))
        temp_input.extend(yhat[0].tolist())
        temp_input=temp_input[1:]
        #print(temp_input)
        lst_output.extend(yhat.tolist())
        i=i+1
    else:
        x_input = x_input.reshape((1, n_steps,1))
        yhat = model.predict(x_input, verbose=0)
        print(yhat[0])
        temp_input.extend(yhat[0].tolist())
        print(len(temp_input))
        lst_output.extend(yhat.tolist())
        i=i+1
    print(lst_output)
    

plotting the graph for the prediction 


day_new = np.arange(1,101)
day_predict = np.arange(101,131)


import matplotlib.pyplot as plt


len(df1)

#plotting the orignal trend and predicted trend (blue graph : orignal trend , green graph:predicted trend for the next 30 days)
plt.plot(day_new,scaler.inverse_transform(df1[1156:]))
plt.plot(day_predict,scaler.inverse_transform(lst_output))

df3 = df1.tolist()

df3.extend(lst_output)
plt.plot(df3[1200:])

df3 = scaler.inverse_transform(df3).tolist()
plt.plot(df3)
